'''
문제 설명
고속도로를 이동하는 모든 차량이 고속도로를 이용하면서 단속용 카메라를 한 번은 만나도록 카메라를 설치하려고 합니다.

고속도로를 이동하는 차량의 경로 routes가 매개변수로 주어질 때, 모든 차량이 한 번은 단속용 카메라를 만나도록 하려면 최소 몇 대의 카메라를 설치해야 하는지를 return 하도록 solution 함수를 완성하세요.

제한사항

차량의 대수는 1대 이상 10,000대 이하입니다.
routes에는 차량의 이동 경로가 포함되어 있으며 routes[i][0]에는 i번째 차량이 고속도로에 진입한 지점, routes[i][1]에는 i번째 차량이 고속도로에서 나간 지점이 적혀 있습니다.
차량의 진입/진출 지점에 카메라가 설치되어 있어도 카메라를 만난것으로 간주합니다.
차량의 진입 지점, 진출 지점은 -30,000 이상 30,000 이하입니다.

link : https://programmers.co.kr/learn/courses/30/lessons/42884
'''

def solution(routes):
    # 고속도로 진출 위치를 기준으로 정렬한다.
    # 진출 위치가 가장 앞인 곳에 카메라를 설치한다고 가정하고,
    # 그 카메라가 다른 고속도로를 포함하는지 판단할 것이기 때문.
    # ex [1, 10], [5, 8], [7, 15], [16, 20]) 의 진입/진출 지점이 있다면
    # [5, 8], [1, 10], [7, 15], [16, 20] 순으로 정렬되고,
    # 8번 지점에 카메라를 설치한 뒤 8번 지점의 카메라가 [1,10], [9,15], [16, 20] 지점에 속해있는지를 판단

    routes.sort(key=lambda x: x[1])
    size = len(routes)

    install = [0 for _ in range(size)]
    count = 0

    for i in range(size) :

        # 만약 install[i] (i번째 고속도로 지점에 속한 카메라가 있을 경우 다음 지점으로 이동)
        if install[i] :
            continue

        # 그렇지 않다면 새로 카메라를 설치해야한다는 뜻이므로 카메라를 현재 고속도로의 진출지점에 설치한다.
        count += 1
        camera = routes[i][1]

        for l in range(size) :
            # 현재 설치된 카메라가 다른 고속도로 지점에 포함되는지 판단하여,
            # 포함된다면 install[i]를 1로(설치했음)으로 변경한다.
            if not install[l] :
                if routes[l][0] <= camera and routes[l][1] >= camera:
                    install[l] = 1

    return count


print(solution([[-20, 15], [-14, -5], [-18, -13], [-5, -3]]))